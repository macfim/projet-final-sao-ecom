version: "3"

networks:
  microservices-network:
    driver: bridge

services:
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - microservices-network

  kafka:
    image: wurstmeister/kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "order-events:1:1"
    depends_on:
      - zookeeper
    networks:
      - microservices-network

  api-gateway:
    build: ./api-gateway
    ports:
      - "3000:3000"
    volumes:
      - ./order-service/order.proto:/app/order.proto
    environment:
      - ORDER_SERVICE_URL=order-service:3003
      - PRODUCT_SERVICE_URL=product-service:3005
      - USER_SERVICE_URL=user-service:3004
    depends_on:
      - user-service
      - product-service
      - order-service
    networks:
      - microservices-network

  notification-service:
    build: ./notification-service
    ports:
      - "3002:3002"
    environment:
      - KAFKA_BROKER=kafka:9092
    depends_on:
      - kafka
    networks:
      - microservices-network
    restart: on-failure

  order-service:
    build: ./order-service
    ports:
      - "3003:3003"
    environment:
      - KAFKA_BROKER=kafka:9092
    depends_on:
      - kafka
    networks:
      - microservices-network
    restart: on-failure

  user-service:
    build: ./user-service
    ports:
      - "3004:3004"
    networks:
      - microservices-network

  product-service:
    build: ./product-service
    ports:
      - "3005:3005"
    networks:
      - microservices-network
